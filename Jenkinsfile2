pipeline {
    agent any

    parameters {
        choice(
            choices: ['Apache', 'Nginx'],
            name: 'WEBSERVER',
            description: 'Select the web server to deploy'
        )
        choice(
            choices: ['Development', 'Test', 'Production'],
            name: 'ENV',
            description: 'Select the environment'
        )
    }

    stages {

        stage('Create directory for the WEB Application') {
            when { 
                equals(actual: currentBuild.number, expected: 1)
            }
            steps {
                // First, drop the directory if it exists
                sh 'rm -rf $(pwd)/app-web'
                // Create the directory
                sh 'mkdir $(pwd)/app-web'
            }
        }

        stage('Drop the container') {
            steps {
                echo 'Dropping the container...'
                sh 'docker rm -f app-web || true'
            }
        }

        // Apache Webserver in Development
        stage('Create the Apache container in Development') {
            when {
                allOf {           
                    environment name: 'WEBSERVER', value: 'Apache'
                    environment name: 'ENV', value: 'Development'
                }
            }
            steps {
                echo 'Creating Apache container in Development...'
                sh 'docker run -dit --name app-web -p 9100:80 -v $(pwd)/app-web:/usr/local/apache2/htdocs/ httpd'
            }
        }

        // Nginx Webserver in Test
        stage('Create the Nginx container in Test') {
            when {
                allOf {           
                    environment name: 'WEBSERVER', value: 'Nginx'
                    environment name: 'ENV', value: 'Test'
                }
            }
            steps {
                echo 'Creating Nginx container in Test...'
                sh 'docker run -dit --name app-web -p 9100:80 -v $(pwd)/app-web:/usr/share/nginx/html nginx'
            }
        }

        // Nginx Webserver in Production
        stage('Create the Nginx container in Production') {
            when {
                allOf {           
                    environment name: 'WEBSERVER', value: 'Nginx'
                    environment name: 'ENV', value: 'Production'
                }
            }
            steps {
                echo 'Creating Nginx container in Production...'
                sh 'docker run -dit --name app-web -p 9100:80 -v $(pwd)/app-web:/usr/share/nginx/html nginx'
            }
        }

        // Error if Webserver is Nginx in Development
        stage('Error message for Nginx in Development') {
            when {
                allOf {
                    environment name: 'WEBSERVER', value: 'Nginx'
                    environment name: 'ENV', value: 'Development'
                }
            }
            steps {
                echo 'ERROR: Nginx cannot be deployed in Development environment...'
            }
        }

        // Error if Webserver is Apache in Test or Production
        stage('Error message for Apache in Test/Production') {
            when {
                allOf {
                    environment name: 'WEBSERVER', value: 'Apache'
                    anyOf {
                        environment name: 'ENV', value: 'Test'
                        environment name: 'ENV', value: 'Production'
                    }
                }
            }
            steps {
                echo 'ERROR: Apache cannot be deployed in Test or Production environments...'
            }
        }

        // Copy the application
        stage('Copy the web application to the container directory') {
            steps {
                echo 'Copying web application...'
                sh 'cp -r web/* $(pwd)/app-web'
            }
        }
    }

    post {
        always {
            echo 'These steps are always executed'
        }

        success {
            echo 'The deployment has worked'
            archiveArtifacts(
                allowEmptyArchive: true,
                artifacts: 'web/*',
                followSymlinks: false
            )
            cleanWs()
        }

        failure {
            echo 'An error has occurred'
        }
    }
}
